Notes on learning ASP.NET
-------------------------

 1. Installation: I ran the pkg to install it, then chown'd the relevant
    files (/usr/local/share/dotnet) and added that directory to my PATH. Not
    clear to me why the installer didn't do that, but here we are!
 2. Getting it running! Using `dotnet run` worked right off the bat. Phew.
 3. Changing Pages/Index.cshtml worked great. Next up: learning how that
    date function call works.
 4. Once hello world worked, I noticed a ton of files had changed that I
    originally had under version control. Oops! Went and found the
    github-recommended .gitignore for visual studio, which helped a ton. Also
    used `git -rm -r --cached on lib and obj directories. At a first
    glance, `git ls-tree --full-tree -r --name-only HEAD` seems to contain
    (mostly?) files that we care about for the project.
 5. After the hello world tutorial, the webpage suggests a tutorial on
    Razor pages – huh, wonder what those are.
 6. Browsing the collection of tutorials at
    dotnet.microsoft.com/learn/aspnet, I was interested in the ASP.NET
    Security topic (I haven't done much with security on the web before),
    so I checked that out.
      * Cross-site scripting (XSS) attacks: trick your app into inserting
        <script> into rendered page (that makes sense, would allow them to
        run nearly anything on your server) or by inserting a `0n*` element
        – which is astonishingly hard to google. To prevent XSS attacks,
        sanitize any user input and never put untrusted data directly in
        HTML. (HTML encoding, for elements or attributes). As much as
        possible avoid putting untrusted data into JS, for example by
        putting the js in HTML elements you retrieve at runtime. JS
        encoding is a backup plan. Encoding takes place at output time,
        so never encode values in a database (this feels counterintuitive).
      * SQL injection attacks: trick your app into executing SQL command as
        part of a standard query. To avoid, always pass user-provided
        values using parameterization.
      * Cross-site request forgery (CSRF/XSRF) attacks: can allow
        exploitation of cookies to impersonate a user. TBH  I didn't
        totally  follow this discussion – plan to come back and revisit
        once I'm in the web dev mindset. :)
      * Open redirect attacks: attacker can substitute a redirect URL and
        send your user to a malicious site. To avoid, always check redirect
        URLs for tampering, ensure that they are done locally or to a known
        url, never based on user input.
 7. Since David and Elissa recommended starting with a console app, I
    happened to find an introductory C# tutorial based on that. The goal:
    get to know syntax, operators, common functions, and control flow.
